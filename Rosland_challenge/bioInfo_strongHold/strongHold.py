# WRITTEN BY ADEWALE 

       # 1
def neucleoCount(Dna):
    # Listing all possible neucleotides
    Neucleotides = {'A':0,'C':0,'G':0,'T':0}
    # stting up dummy list and string for analysis
    dummyList = []
    answer_string = ' '

    # incrementing the values of each neucleotides into the dictionary
    for neucleotide in Dna:
        Neucleotides[neucleotide]+=1

    # selecting the dic values and formatting the answer in the desirable form
    for  val in Neucleotides.values():
        dummyList.append(val)
    return answer_string.join( map(str, dummyList))

string = 'GCAAGTAGGGCCGCAATTTCTCGGTTTAGAGGAGAGGGTCCTTATTGCATTGTGAAATTATATTTCAGCTTCCATGTGTAATACAGTTACAGTCTGATAATTTACCGTCATACTACAATACGAACTGCAAATCCACGTACGACCACTCCATTTGATGTCGGGAAGAGTGCGAAGTGCATACAAGTTGAGCGAGCCGTCGAGTAAAGCTGGACGAGCAGGGGAAACACCCCCGAATCTCCGTATCGCTCCTTCAGCACTTTACGTAGCACGAGTTTTACGGAGTTACCTGGGGCTTCGTAGAGTGAAGCAGACCTACAACCGTAGTGCGCAGCCAAGTACGTTACATAGTGACACCTATGGTTCCTGATGAATAGTTAACACAGTGTCTCTTCTCTATACAGAATCAAATACGGTAGTACCTGTTGGCTTCAAATTCCAAAGCTAAGCAAGGCCATACGCTGACGCTGATATTCGGGCCCGCGTTCTGGAGAAGAACCTCGTCTCCGATCCCCTACTGTGAAACTTTTCGTTGGACTGAAAGGCCTCACGCTATATACTCCTAGGGACTGGGTCGTAAACGTTCTCTTAAACAGGGGACTGTAATCTAGGTTCAGGGGGTGAAAGGGATACTGCTTGACGCAGTCGTGTACGCGACTGTTAATTGCACTTCAATTGATCAGGTTAATCCTCAGCGACCTCTGTAATGGCTGTCACGACGGTGCCTTTATGATGTAGCCGAGAAGATGTGTCGCCTTAAACGATTTAGTTGTATGACACTAGAAGCGTCCTGCAGGTCCTACGATAGAGGGGGGGTTCCGATGTCAAGAGCTAGCAACGATTTGCGGATTCGATGTT'
# print (neucleoCount(string))



    # 2
# DNA transcribed to RNA

def DnaToRna(Dna):
    Rna = Dna.replace('T', "U" )
    return Rna

str = 'GTCAGATTACTCTTCGGAGGAACGGTCGCCTTTATTGGATTTGTCGGACTTGACACAAATCCTTTAGCCGCCGCCGCGCAATCGTCTTAACCTAAAAAACCGCATAATCATCTTCTCTACTTCCACGGACATGTTGCTAGGTACGGTTTTAGTCCGATGTAGACCAGATGTACGCCATCACTGAAGTCAGGGCTCGAGGTCAAGATTCTAGGGCGCGTAACTGGAAGACGGTGAAAGCCGTTGATCACTGTAAGGTGTTATAAGACGTACGCCGGTGGGCTTGTGCACACCTCTCGGAGTCTCACTCCTGCATCAAGAGCTTCTGCCGTCGATACCTAGATCCCACGGCCTTTAGGGGTGCCGCTGTCACGTTATTGGGAACTGCCGTGCCGGGCAGTGAGCAAAGTGAAAACAACTCACCTTTCAAATTACATGTGCCTGCTACAAAGGTCCTGTCATCGCGTTAGGCGTCCAATTCCGGGTAGTAGTCTGACTTTTGCAACGGGGTGATTCCTTTGCCCGCACTACGATGCGCATCAATCTACCGGGCCTCACAGTACTCAATGAGATCGCTCTGTGTATTAGGATCGGTAACTAGTTGCTTATTGCGAAGACCTCACACACTCCTTTATCGTTAAGATCGTCAGTCCAAAGTGATGATTTTTCACCCCGAGCCTAGACTCTTTGCCCCAAAATCTCTTAGGGCATAACAGTCTTAAAGCGGTGTGCAACCCTTTCTGGCTCGACCACGCCAAGGAGAGCTATTGCAAGCAATGTCTTCCTACCAGGCGACGAACCGCGTCAAGAGCGGCGCATAACGGAGTGTACTGGACGGTGTGTTTGTATCGTGCGACTGACCGTCGCTATCCCGGCGGCTACAACCAGGGGTTGAACTGCAGAGCAATATTTCTTGAGGATCGGCAACAAAAGGCTTCTCAGACAGAAAACAAAGCGAGTATCAAGTTATAGAGACGTTCGTTGT'

#print(DnaToRna(str))


        #3

# REVERSE COMPLEMENT OF A DNA STRING

def rev_comp(string):
    # first reversing a the string
    string =  string[::-1]

    # now replacing the reversed string 'A' with 'T' and 'C' with 'G' and vice versa
    replacements_dict = {
    'A': 'T',
    'T': 'A',
    'C': 'G',
    'G': 'C'
    }

    string = string.translate(string.maketrans(replacements_dict))



        
    return string



strin = 'GTTCGTCATTTACGAGATGTCCGTGAAGGTCATCTAGGAGGAGATGAGACGCTAGGTCAGACACGTCATCTCGGGAGCGACGTAAAAGTTTGGAACAACACTCTTTCTGGTCGATACTAACAAGGTTGCGCATCATCATTAAGTTTGCGGTACGCAAGGTTCAAACCGACGTCCAAGGCTGGCATTGGCGGGCATTGTTTAGGACAATCTAATCTCCTTTTAGTTTATTCGTGTTACTGACTTCATTAGTAACGATCTTCGGATGGTAAACAAACGACGGCGTTACTCTAAATTAAATTCGCCTTATCCTTCAGAGAATATGCTGCGAATCAATCAATGGGGATCGTTTGTGGAACTCTCACGTTGTCTGACGTTGTAGGTGGAATCGCGATTGGTCACACGTGACACAGTGACTCGGAGTTCTAACAGACGGATTTTCGTCGCCTCCGGTCATCTCCCGCCACTTGTCTACAGTAGTCACGCAAGCGGTGAAAAATGAGTTGCAGGGGTTCATAGCTGAATAGGACTTACCAGTTAAACCGGGAACGGGTGGTACCGCTTCCATCCTTCCTGAGCTCTGTACGAAGTCGGACTGGTTGCGCGAAATCTATATTATAACAGATAAGGCAGGCGCGATCGGACAACTTATTATTCCACAGCCATCGCTACCCTCCGCATGAGGGACGTCAATGTAGCCCGCGTCGACCACGCTCACGCGCTCCACATCCATACTGATGTGCGTGAGCATGCTATACGGGGATTGGCCGTCTGAGACGGACTCACTTCGTACACGTGCCCTCCAGAGGCCCCAATAGTCATCTTATCAGGAACACAGCGCTCCGTCATTGTGGAGCGA'
print(rev_comp(strin))